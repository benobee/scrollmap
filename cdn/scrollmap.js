/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _trigger = __webpack_require__(1);\n\nvar _trigger2 = _interopRequireDefault(_trigger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A module for testing if a DOM element is visible in the \n * viewport, then triggers callbacks on execution.\n * @namespace ScrollMap \n */\n\nvar Scroll_Event_Trigger = function () {\n    function Scroll_Event_Trigger() {\n        _classCallCheck(this, Scroll_Event_Trigger);\n\n        this.lastScrollTop = 0;\n        this.points = [];\n        this.topics = {};\n    }\n\n    /**\n     * Publish part of pubsub pattern.\n     * @param  {String} topic \n     * @param  {Object} data  \n     */\n\n\n    _createClass(Scroll_Event_Trigger, [{\n        key: \"emit\",\n        value: function emit(topic, data) {\n            // return if the topic doesn't exist, or there are no listeners\n            if (!this.topics[topic] || this.topics[topic].length < 1) {\n                return;\n            }\n\n            // send the event to all listeners\n            this.topics[topic].forEach(function (listener) {\n                return listener(data || {});\n            });\n        }\n\n        /**\n         * Subscribe part of pubsub pattern\n         * @param  {String} topic\n         * @param  {Function} listener         \n         */\n\n    }, {\n        key: \"on\",\n        value: function on(topic, listener) {\n            // create the topic if not yet created\n            if (!this.topics[topic]) {\n                this.topics[topic] = [];\n            }\n\n            // add the listener\n            this.topics[topic].push(listener);\n        }\n\n        /**\n         * A method for staggering an array of triggers. \n         *\n         * Properties for options config object:\n         *\n         * interval: (number) :\n         * changes the interval speed of the sequence\n         *\n         * order: (string) :\n         * changes the order of the sequence. Order options are \"random\", and \"reverse\".\n         *\n         * callback (item, index):\n         * can get the item and index of the array as arguments\n         *\n         * @param  {Array} array   \n         * @param  {Object} options\n         * @param  {Function} func  \n         * @memberOf Scrollmap  \n         * @return {Object}         \n         */\n\n    }, {\n        key: \"sequence\",\n        value: function sequence(array, options, func) {\n            array = Array.prototype.slice.call(array);\n\n            var delay = 0;\n\n            if (options.order) {\n                this.sequenceOrder(array, options.order);\n            }\n\n            if (options.delay) {\n                delay = options.delay;\n            }\n\n            var run = array.forEach(function (item, i) {\n                setTimeout(function () {\n                    func(array[i], i);\n                }, options.interval * i);\n            });\n\n            setTimeout(run, delay);\n\n            return this;\n        }\n\n        /**\n         * The method which executes the the desired\n         * sequence method based on the arguments\n         * @param  {Array} array\n         * @param  {String} order\n         * @memberOf Scrollmap \n         * @return {Array}\n         */\n\n    }, {\n        key: \"sequenceOrder\",\n        value: function sequenceOrder(array, order) {\n            switch (order) {\n                case \"random\":\n                    array = array.sort(function () {\n                        return 0.5 - Math.random();\n                    });\n                    break;\n                case \"reverse\":\n                    array = array.reverse();\n                    break;\n                default:\n            }\n            return array;\n        }\n\n        /**\n         * A method for adding triggers when element is visible in the viewport. \n         *\n         * Properties for options config object:\n         * target (string or element): Using querySelectorAll a target string selector \n         * is needed, or you can specify an actual element.\n         *\n         * surfaceVisible (number): the percentage area, which is represented as a \n         * number from 0 - 1 is the area of the which is visible in the viewport.\n         *\n         * runOnScroll (boolean) : by default the callback is run only one time whent \n         * the element is visible. By changing to true, the callback will be run \n         * as long as the scroll event is happening.\n         *\n         * alwaysRunOnTrigger (boolean): by default the triggered element callback\n         * will only be executed one time. Setting to true will re-trigger thcallback \n         * everytime the element has been in and out of the viewport.\n         *\n         * callback (object):\n         * This is the function which will be exectued when the element is detected\n         * in the viewport. To reference the node, pass it into the callback as an argument.\n         *\n         * @param  {Object}   args     options for callback triggering\n         * @param  {Function} callback the method executed based on the argments\n         * @memberOf Scrollmap\n         */\n\n    }, {\n        key: \"trigger\",\n        value: function trigger(args, callback) {\n            var _this = this;\n\n            var el = args.target;\n\n            var triggerElementSelector = args.triggerElement;\n\n            if (args.triggerElement) {\n                args.triggerElement = this.checkSelector(args.triggerElement);\n            }\n\n            el = this.checkSelector(el);\n\n            function _id(i) {\n                return '_' + (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)) + '_' + i;\n            }\n\n            el.forEach(function (node, i) {\n                node.setAttribute(\"data-scrollmap-id\", _id(i));\n                args.triggerElement ? node.setAttribute(\"data-scrollmap-trigger-element\", triggerElementSelector) : false;\n                args.transition ? node.setAttribute(\"data-scrollmap-transition\", args.transition) : false;\n                node.setAttribute(\"data-scrollmap-loaded\", true);\n                node.setAttribute(\"data-scrollmap-triggered-in\", false);\n                node.setAttribute(\"data-scrollmap-triggered-out\", false);\n                var point = new _trigger2.default(node, args, callback);\n\n                _this.points.push(point);\n            });\n            return this;\n        }\n\n        /**\n         * The target element can either be a string query selector \n         * or a DOM element. This determines which method is being\n         * used and retuns the element into an array.\n         * \n         * @param  {String, HTMLElement} target the desired target DOM element. \n         * @return {Array}        \n         * @memberOf Scrollmap \n         */\n\n    }, {\n        key: \"checkSelector\",\n        value: function checkSelector(target) {\n            switch (typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) {\n                case \"string\":\n                    target = this.toArray(document.querySelectorAll(target));\n                    break;\n                case \"object\":\n                    target = [target];\n                    break;\n                default:\n                    target = this.toArray(document.querySelectorAll(target));\n            }\n\n            return target;\n        }\n\n        /**\n         * creates a true array from collection of elements\n         * @param  {HTMLElement} collection \n         * @memberOf Scrollmap \n         * @return {Array}            returns the converted node list.\n         */\n\n    }, {\n        key: \"toArray\",\n        value: function toArray(collection) {\n            return Array.prototype.slice.call(collection);\n        }\n\n        /**\n         * sets points with data hooks and runs callback method  \n         * @memberOf Scrollmap \n         * @param {Object} point \n         */\n\n    }, {\n        key: \"setTriggerIn\",\n        value: function setTriggerIn(point) {\n            point.element.setAttribute(\"data-scrollmap-is-visible\", true);\n            point.element.setAttribute(\"data-scrollmap-triggered-in\", true);\n            if (!point.isVisible && !point.hasBeenVisible) {\n                if (point.callback) {\n                    if (!point.alwaysRunOnTrigger) {\n                        point.hasBeenVisible = true;\n                    }\n                    point.onTriggerIn();\n                }\n                if (!point.runOnScroll) {\n                    point.isVisible = true;\n                }\n            }\n        }\n\n        /**\n         * Attaches various data attributes to the initailized\n         * DOM element. This is useful for doing CSS hooks.\n         * @param {Object} point the point in the index to be mututated.\n         * @memberOf Scrollmap \n         */\n\n    }, {\n        key: \"setTriggerOut\",\n        value: function setTriggerOut(point) {\n            point.element.setAttribute(\"data-scrollmap-is-visible\", false);\n            point.element.setAttribute(\"data-scrollmap-triggered-out\", true);\n            point.isVisible = false;\n            if (point.alwaysRunOnTrigger) {\n                point.element.setAttribute(\"data-scrollmap-triggered-in\", false);\n            }\n        }\n\n        /**\n         * look for direction of scroll and base element visible\n         * percentage off of either top bottom when scrolling\n         * down, or the top when scrolling up.\n         * \n         * @param  {DOM} el                 the trigger element\n         * @param  {Number} percetageOfElement the option value for percent of element viewable in the viewport\n         * @return {Bool}                    if element is not in the viewport we return false\n         * @memberOf Scrollmap \n         */\n\n    }, {\n        key: \"elementInViewport\",\n        value: function elementInViewport(el, percetageOfElement) {\n            var rect = el.getBoundingClientRect();\n            var stats = {\n                top: rect.top - window.innerHeight,\n                bottom: rect.bottom + rect.height,\n                height: rect.height\n            };\n            var amount = stats.height * percetageOfElement;\n\n            if (stats.bottom - amount > stats.height && stats.top + amount < 0) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Created a separate method for readability in what\n         * happens after the element in in the viewport.\n         * \n         * @param  {[type]} point [description]\n         * @return {[type]}       [description]\n         * @memberOf Scrollmap\n         */\n\n    }, {\n        key: \"checkVisible\",\n        value: function checkVisible(point) {\n            var elementInviewport = this.elementInViewport(point.element, point.surfaceVisible);\n\n            if (elementInviewport) {\n                this.setTriggerIn(point);\n            } else {\n                this.setTriggerOut(point);\n            }\n        }\n\n        /**\n         * return the scroll direction via a string value\n         * @return {String}\n         * @memberOf Scrollmap\n         */\n\n    }, {\n        key: \"scrollDirection\",\n        value: function scrollDirection() {\n            var direction = \"\";\n            var st = window.pageYOffset || document.documentElement.scrollTop;\n\n            if (st > this.lastScrollTop) {\n                direction = \"scrollDown\";\n            } else {\n                direction = \"scrollUp\";\n            }\n            this.lastScrollTop = st;\n\n            return direction;\n        }\n\n        /**\n         * bind event listeners to to enable the execution\n         * of all desired functions.\n         */\n\n    }, {\n        key: \"bindEventListeners\",\n        value: function bindEventListeners() {\n            var _this2 = this;\n\n            // initial check on page load to see if elements are visible\n            window.addEventListener('load', function () {\n                console.log(_this2);\n                _this2.points.forEach(function (point) {\n                    _this2.checkVisible(point);\n                });\n            }, false);\n\n            // check for visible elements on scroll\n            window.addEventListener(\"scroll\", function () {\n                _this2.scrollOrient = _this2.scrollDirection();\n                _this2.emit(_this2.scrollOrient);\n                _this2.points.forEach(function (point) {\n                    _this2.checkVisible(point);\n                });\n            });\n        }\n    }]);\n\n    return Scroll_Event_Trigger;\n}();\n\n;\n\nvar Scrollmap = new Scroll_Event_Trigger();\n\nScrollmap.bindEventListeners();\n\nwindow.Scrollmap = Scrollmap;\n\nexports.default = Scrollmap;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scrollmap.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/scrollmap.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Trigger = function () {\n\tfunction Trigger(element, options, callback) {\n\t\t_classCallCheck(this, Trigger);\n\n\t\tthis.element = element; // the DOM node to trigger\n\t\tthis.callback = callback; // function to execute on visible\n\t\tthis.isVisible = false; // is visible in the viewport\n\t\tthis.hasBeenVisible = false; // has been in and out of the viewport\n\t\tthis.surfaceVisible = 0.5; // the area of the element that will trigger the callback \"default is 50%\"\n\t\tthis.runOnScroll = false; // for setting the callback to execute when the element is visible\n\t\tthis.delay = 0;\n\t\tthis.alwaysRunOnTrigger = false; // toggle to always execute the callback after element has been visible.\n\n\t\tif (options) {\n\t\t\t_extends(this, options);\n\t\t}\n\t}\n\n\t_createClass(Trigger, [{\n\t\tkey: \"onTriggerIn\",\n\t\tvalue: function onTriggerIn() {\n\t\t\tvar _this = this;\n\n\t\t\tif (this.triggerElement) {\n\t\t\t\tthis.triggerElement.forEach(function (node) {\n\t\t\t\t\t_this.transition ? node.setAttribute(\"data-scrollmap-transition\", _this.transition) : false;\n\t\t\t\t\t_this.callback(node);\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.callback(this.element);\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: \"destroy\",\n\t\tvalue: function destroy() {\n\t\t\tthis.element = null;\n\t\t\tthis.isDestroyed = true;\n\t\t}\n\t}]);\n\n\treturn Trigger;\n}();\n\nexports.default = Trigger;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/trigger.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/trigger.js?");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(0);\n\n\n//////////////////\n// WEBPACK FOOTER\n// multi ./src/scrollmap.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///multi_./src/scrollmap.js?");

/***/ })
/******/ ]);